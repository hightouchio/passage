syntax = "proto3";
option go_package = "github.com/hightouchio/passage/tunnel/proto";

import "google/protobuf/empty.proto";

/**
 * Tunnel represents a configured tunnel.
 */
message Tunnel {
  enum Type {
    STANDARD = 0;
    REVERSE = 1;
  }

  message StandardTunnel {
    string ssh_host = 1;
    uint32 ssh_port = 2;
    string ssh_user = 3;
    string service_host = 4;
    uint32 service_port = 5;
  }

  message ReverseTunnel {
    // No fields
  }

  string id = 1;
  Type type = 2;
  bool enabled = 3;
  uint32 bind_port = 4;

  oneof tunnel {
    StandardTunnel standard_tunnel = 6;
    ReverseTunnel reverse_tunnel = 5;
  }
}

/**
 * TunnelInstance represents a single instance of a running Tunnel
 */
message TunnelInstance {
  string host = 1;
  uint32 port = 2;

  /**
   * status represents the aggregate status of all the healthchecks on this tunnel
   */
  TunnelHealthcheck.Status status = 3;

  /**
   * healthchecks represent the health of each individual healthcheck on this tunnel instance
   */
  repeated TunnelHealthcheck healthchecks = 4;
}

/**
 * TunnelHealthcheck represents the health of a tunnel instance
 */
message TunnelHealthcheck {
  enum Status {
    WARNING = 0;
    PASSING = 1;
    CRITICAL = 2;
  }

  string id = 1;
  Status status = 2;
  string message = 3;
}

/**
 * Passage is our tunnel API
 */
service Passage {
  rpc CreateStandardTunnel(CreateStandardTunnelRequest) returns (Tunnel);
  rpc CreateReverseTunnel(CreateReverseTunnelRequest) returns (Tunnel);

  rpc GetTunnel(GetTunnelRequest) returns (GetTunnelResponse);
  rpc DeleteTunnel(DeleteTunnelRequest) returns (google.protobuf.Empty);
}

message CreateStandardTunnelRequest {
  string ssh_host = 1;
  uint32 ssh_port = 2;
  optional string ssh_user = 3;
  string service_host = 4;
  uint32 service_port = 5;

  repeated string private_keys = 6;
  bool create_key_pair = 7;
}

message CreateReverseTunnelRequest {
  repeated string public_keys = 1;
  bool create_key_pair = 2;
}

message GetTunnelRequest {
  string id = 1;
}

message GetTunnelResponse {
  Tunnel tunnel = 1;
  repeated TunnelInstance instances = 2;
}

message DeleteTunnelRequest {
  string id = 1;
}
