version: "3.9"
services:
  # passage is the tunnel service
  passage:
    build: ./
    command: server
    environment:
      PASSAGE_ENV: dev
      PASSAGE_LOG_LEVEL: debug
      PASSAGE_HTTP_ADDR: 0.0.0.0:6000
      PASSAGE_API_ENABLED: 'true'
      PASSAGE_TUNNEL_STANDARD_ENABLED: 'true'

      # Configure keystore via minio
      AWS_ACCESS_KEY_ID: 'passage'
      AWS_SECRET_ACCESS_KEY: 'passage'
      PASSAGE_KEYSTORE_S3_BUCKET_NAME: 'keystore'
      PASSAGE_KEYSTORE_S3_BUCKET_REGION: 'us-east-1'
      PASSAGE_KEYSTORE_S3_ENDPOINT: 'http://minio:9000'
      PASSAGE_KEYSTORE_S3_DISABLE_SSL: 'true'
      PASSAGE_KEYSTORE_S3_FORCE_PATH_STYLE: 'true'

      PGHOST: postgres
      PGPORT: 5432
      PGUSER: passage
      PGDBNAME: passage
      PGSSLMODE: disable
    ports:
      - "6000:6000"
    networks:
      - passage_dev
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://localhost:6000/healthcheck"

  # Passage uses Postgres as the datastore for the control plane.
  postgres:
    image: postgres:11.6
    restart: always
    environment:
      POSTGRES_USER: "passage"
      POSTGRES_DB: "passage"
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '6432:5432'
    networks:
      - passage_dev
    healthcheck:
      test: "pg_isready -U passage -d passage"

  # Passage uses Minio in development as a keystore.
  minio:
    image: minio/minio:RELEASE.2021-12-20T22-07-16Z
    environment:
      MINIO_ROOT_USER: passage
      MINIO_ROOT_PASSWORD: passage
    networks:
      - passage_dev
    volumes:
      - minio:/data
    entrypoint:
      - "sh"
      - "-c"
      - "mkdir -p /data/keystore && minio server /data"
    restart: always

volumes:
  # Persistent volume for Minio keystore.
  minio:

networks:
  passage_dev:
    name: passage_dev
