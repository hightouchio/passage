// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PassageTunnelType string

const (
	PassageTunnelTypeNormal  PassageTunnelType = "normal"
	PassageTunnelTypeReverse PassageTunnelType = "reverse"
)

func (e *PassageTunnelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PassageTunnelType(s)
	case string:
		*e = PassageTunnelType(s)
	default:
		return fmt.Errorf("unsupported scan type for PassageTunnelType: %T", src)
	}
	return nil
}

type NullPassageTunnelType struct {
	PassageTunnelType PassageTunnelType
	Valid             bool // Valid is true if PassageTunnelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPassageTunnelType) Scan(value interface{}) error {
	if value == nil {
		ns.PassageTunnelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PassageTunnelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPassageTunnelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PassageTunnelType), nil
}

type PassageKeyAuthorization struct {
	CreatedAt  pgtype.Timestamp
	KeyID      pgtype.UUID
	TunnelType PassageTunnelType
	TunnelID   pgtype.UUID
}

type PassageReverseTunnel struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	Enabled    bool
	SshdPort   pgtype.Int4
	TunnelPort pgtype.Int4
	LastUsedAt pgtype.Timestamp
	Error      pgtype.Text
}

type PassageTunnel struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamp
	Enabled     bool
	TunnelPort  pgtype.Int4
	SshUser     pgtype.Text
	SshHost     string
	SshPort     int32
	ServiceHost string
	ServicePort int32
	Error       pgtype.Text
}
