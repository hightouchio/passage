// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tunnel_normal.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNormalTunnel = `-- name: CreateNormalTunnel :one
INSERT INTO passage.tunnels (ssh_user, ssh_host, ssh_port, service_host, service_port)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, enabled, tunnel_port, ssh_user, ssh_host, ssh_port, service_host, service_port, error, healthcheck_enabled
`

type CreateNormalTunnelParams struct {
	SshUser     pgtype.Text
	SshHost     string
	SshPort     int32
	ServiceHost string
	ServicePort int32
}

func (q *Queries) CreateNormalTunnel(ctx context.Context, arg CreateNormalTunnelParams) (PassageTunnel, error) {
	row := q.db.QueryRow(ctx, createNormalTunnel,
		arg.SshUser,
		arg.SshHost,
		arg.SshPort,
		arg.ServiceHost,
		arg.ServicePort,
	)
	var i PassageTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.TunnelPort,
		&i.SshUser,
		&i.SshHost,
		&i.SshPort,
		&i.ServiceHost,
		&i.ServicePort,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}

const deleteNormalTunnel = `-- name: DeleteNormalTunnel :exec
    DELETE
FROM passage.tunnels
WHERE id = $1
`

func (q *Queries) DeleteNormalTunnel(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNormalTunnel, id)
	return err
}

const getNormalTunnel = `-- name: GetNormalTunnel :one
SELECT id, created_at, enabled, tunnel_port, ssh_user, ssh_host, ssh_port, service_host, service_port, error, healthcheck_enabled
FROM passage.tunnels
WHERE id = $1
`

func (q *Queries) GetNormalTunnel(ctx context.Context, id pgtype.UUID) (PassageTunnel, error) {
	row := q.db.QueryRow(ctx, getNormalTunnel, id)
	var i PassageTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.TunnelPort,
		&i.SshUser,
		&i.SshHost,
		&i.SshPort,
		&i.ServiceHost,
		&i.ServicePort,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}

const listEnabledNormalTunnels = `-- name: ListEnabledNormalTunnels :many
SELECT id, created_at, enabled, tunnel_port, ssh_user, ssh_host, ssh_port, service_host, service_port, error, healthcheck_enabled
FROM passage.tunnels
WHERE enabled = true
`

func (q *Queries) ListEnabledNormalTunnels(ctx context.Context) ([]PassageTunnel, error) {
	rows, err := q.db.Query(ctx, listEnabledNormalTunnels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassageTunnel
	for rows.Next() {
		var i PassageTunnel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Enabled,
			&i.TunnelPort,
			&i.SshUser,
			&i.SshHost,
			&i.SshPort,
			&i.ServiceHost,
			&i.ServicePort,
			&i.Error,
			&i.HealthcheckEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNormalTunnel = `-- name: UpdateNormalTunnel :one
UPDATE passage.tunnels
SET enabled=COALESCE($2, enabled),
    service_host=COALESCE($3, service_host),
    service_port=COALESCE($4, service_port),
    ssh_host=COALESCE($5, ssh_host),
    ssh_port=COALESCE($6, ssh_port),
    ssh_user=COALESCE($7, ssh_user)
WHERE id = $1
RETURNING id, created_at, enabled, tunnel_port, ssh_user, ssh_host, ssh_port, service_host, service_port, error, healthcheck_enabled
`

type UpdateNormalTunnelParams struct {
	ID          pgtype.UUID
	Enabled     pgtype.Bool
	ServiceHost pgtype.Text
	ServicePort pgtype.Int4
	SshHost     pgtype.Text
	SshPort     pgtype.Int4
	SshUser     pgtype.Text
}

func (q *Queries) UpdateNormalTunnel(ctx context.Context, arg UpdateNormalTunnelParams) (PassageTunnel, error) {
	row := q.db.QueryRow(ctx, updateNormalTunnel,
		arg.ID,
		arg.Enabled,
		arg.ServiceHost,
		arg.ServicePort,
		arg.SshHost,
		arg.SshPort,
		arg.SshUser,
	)
	var i PassageTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.TunnelPort,
		&i.SshUser,
		&i.SshHost,
		&i.SshPort,
		&i.ServiceHost,
		&i.ServicePort,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}
