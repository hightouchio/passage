// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tunnel_reverse.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createReverseTunnel = `-- name: CreateReverseTunnel :one
INSERT INTO passage.reverse_tunnels DEFAULT VALUES RETURNING id, created_at, enabled, sshd_port, tunnel_port, last_used_at, error, healthcheck_enabled
`

func (q *Queries) CreateReverseTunnel(ctx context.Context) (PassageReverseTunnel, error) {
	row := q.db.QueryRow(ctx, createReverseTunnel)
	var i PassageReverseTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.SshdPort,
		&i.TunnelPort,
		&i.LastUsedAt,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}

const deleteReverseTunnel = `-- name: DeleteReverseTunnel :exec
DELETE
FROM passage.reverse_tunnels
WHERE id = $1
`

func (q *Queries) DeleteReverseTunnel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteReverseTunnel, id)
	return err
}

const getReverseTunnel = `-- name: GetReverseTunnel :one
SELECT id, created_at, enabled, sshd_port, tunnel_port, last_used_at, error, healthcheck_enabled
FROM passage.reverse_tunnels
WHERE id = $1
`

func (q *Queries) GetReverseTunnel(ctx context.Context, id uuid.UUID) (PassageReverseTunnel, error) {
	row := q.db.QueryRow(ctx, getReverseTunnel, id)
	var i PassageReverseTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.SshdPort,
		&i.TunnelPort,
		&i.LastUsedAt,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}

const listEnabledReverseTunnels = `-- name: ListEnabledReverseTunnels :many
SELECT rt.id, rt.created_at, rt.enabled, rt.sshd_port, rt.tunnel_port, rt.last_used_at, rt.error, rt.healthcheck_enabled, encode(sha256(array_to_string(array_agg(ka.key_id), ',')::bytea), 'hex') AS authorized_keys_hash
FROM passage.reverse_tunnels rt
         LEFT JOIN passage.key_authorizations ka ON ka.tunnel_id = rt.id
WHERE rt.enabled = true
GROUP BY rt.id
`

type ListEnabledReverseTunnelsRow struct {
	ID                 uuid.UUID
	CreatedAt          pgtype.Timestamp
	Enabled            bool
	SshdPort           pgtype.Int4
	TunnelPort         pgtype.Int4
	LastUsedAt         pgtype.Timestamp
	Error              pgtype.Text
	HealthcheckEnabled bool
	AuthorizedKeysHash string
}

func (q *Queries) ListEnabledReverseTunnels(ctx context.Context) ([]ListEnabledReverseTunnelsRow, error) {
	rows, err := q.db.Query(ctx, listEnabledReverseTunnels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEnabledReverseTunnelsRow
	for rows.Next() {
		var i ListEnabledReverseTunnelsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Enabled,
			&i.SshdPort,
			&i.TunnelPort,
			&i.LastUsedAt,
			&i.Error,
			&i.HealthcheckEnabled,
			&i.AuthorizedKeysHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReverseTunnel = `-- name: UpdateReverseTunnel :one
UPDATE passage.reverse_tunnels
SET enabled=COALESCE($2, enabled)
WHERE id = $1
RETURNING id, created_at, enabled, sshd_port, tunnel_port, last_used_at, error, healthcheck_enabled
`

type UpdateReverseTunnelParams struct {
	ID      uuid.UUID
	Enabled pgtype.Bool
}

func (q *Queries) UpdateReverseTunnel(ctx context.Context, arg UpdateReverseTunnelParams) (PassageReverseTunnel, error) {
	row := q.db.QueryRow(ctx, updateReverseTunnel, arg.ID, arg.Enabled)
	var i PassageReverseTunnel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Enabled,
		&i.SshdPort,
		&i.TunnelPort,
		&i.LastUsedAt,
		&i.Error,
		&i.HealthcheckEnabled,
	)
	return i, err
}
