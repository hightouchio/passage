// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: keys.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const authorizeKeyForTunnel = `-- name: AuthorizeKeyForTunnel :exec
SELECT key_id
FROM passage.key_authorizations
WHERE tunnel_id = $1
  AND tunnel_type = 'normal'
`

func (q *Queries) AuthorizeKeyForTunnel(ctx context.Context, tunnelID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, authorizeKeyForTunnel, tunnelID)
	return err
}

const getNormalTunnelPrivateKeys = `-- name: GetNormalTunnelPrivateKeys :many
SELECT key_id
FROM passage.key_authorizations
WHERE tunnel_id = $1
  AND tunnel_type = 'normal'
`

func (q *Queries) GetNormalTunnelPrivateKeys(ctx context.Context, tunnelID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getNormalTunnelPrivateKeys, tunnelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var key_id pgtype.UUID
		if err := rows.Scan(&key_id); err != nil {
			return nil, err
		}
		items = append(items, key_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReverseTunnelAuthorizedKeys = `-- name: GetReverseTunnelAuthorizedKeys :many
SELECT key_id
FROM passage.key_authorizations
WHERE tunnel_id = $1
  AND tunnel_type = 'normal'
`

func (q *Queries) GetReverseTunnelAuthorizedKeys(ctx context.Context, tunnelID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getReverseTunnelAuthorizedKeys, tunnelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var key_id pgtype.UUID
		if err := rows.Scan(&key_id); err != nil {
			return nil, err
		}
		items = append(items, key_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
