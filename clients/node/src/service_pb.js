// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.CreateReverseTunnelRequest', null, global);
goog.exportSymbol('proto.CreateStandardTunnelRequest', null, global);
goog.exportSymbol('proto.DeleteTunnelRequest', null, global);
goog.exportSymbol('proto.GetTunnelRequest', null, global);
goog.exportSymbol('proto.GetTunnelResponse', null, global);
goog.exportSymbol('proto.Tunnel', null, global);
goog.exportSymbol('proto.Tunnel.ReverseTunnel', null, global);
goog.exportSymbol('proto.Tunnel.StandardTunnel', null, global);
goog.exportSymbol('proto.Tunnel.TunnelCase', null, global);
goog.exportSymbol('proto.Tunnel.Type', null, global);
goog.exportSymbol('proto.TunnelHealthcheck', null, global);
goog.exportSymbol('proto.TunnelHealthcheck.Status', null, global);
goog.exportSymbol('proto.TunnelInstance', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Tunnel.oneofGroups_);
};
goog.inherits(proto.Tunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.displayName = 'proto.Tunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel.StandardTunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tunnel.StandardTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.StandardTunnel.displayName = 'proto.Tunnel.StandardTunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel.ReverseTunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tunnel.ReverseTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.ReverseTunnel.displayName = 'proto.Tunnel.ReverseTunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TunnelInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TunnelInstance.repeatedFields_, null);
};
goog.inherits(proto.TunnelInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TunnelInstance.displayName = 'proto.TunnelInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TunnelHealthcheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TunnelHealthcheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TunnelHealthcheck.displayName = 'proto.TunnelHealthcheck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateStandardTunnelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateStandardTunnelRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateStandardTunnelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateStandardTunnelRequest.displayName = 'proto.CreateStandardTunnelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateReverseTunnelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateReverseTunnelRequest.repeatedFields_, null);
};
goog.inherits(proto.CreateReverseTunnelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateReverseTunnelRequest.displayName = 'proto.CreateReverseTunnelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTunnelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTunnelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetTunnelRequest.displayName = 'proto.GetTunnelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTunnelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetTunnelResponse.repeatedFields_, null);
};
goog.inherits(proto.GetTunnelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetTunnelResponse.displayName = 'proto.GetTunnelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteTunnelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteTunnelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteTunnelRequest.displayName = 'proto.DeleteTunnelRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Tunnel.oneofGroups_ = [[6,5]];

/**
 * @enum {number}
 */
proto.Tunnel.TunnelCase = {
  TUNNEL_NOT_SET: 0,
  STANDARD_TUNNEL: 6,
  REVERSE_TUNNEL: 5
};

/**
 * @return {proto.Tunnel.TunnelCase}
 */
proto.Tunnel.prototype.getTunnelCase = function() {
  return /** @type {proto.Tunnel.TunnelCase} */(jspb.Message.computeOneofCase(this, proto.Tunnel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    bindPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    standardTunnel: (f = msg.getStandardTunnel()) && proto.Tunnel.StandardTunnel.toObject(includeInstance, f),
    reverseTunnel: (f = msg.getReverseTunnel()) && proto.Tunnel.ReverseTunnel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel}
 */
proto.Tunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel;
  return proto.Tunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel}
 */
proto.Tunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.Tunnel.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBindPort(value);
      break;
    case 6:
      var value = new proto.Tunnel.StandardTunnel;
      reader.readMessage(value,proto.Tunnel.StandardTunnel.deserializeBinaryFromReader);
      msg.setStandardTunnel(value);
      break;
    case 5:
      var value = new proto.Tunnel.ReverseTunnel;
      reader.readMessage(value,proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader);
      msg.setReverseTunnel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBindPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStandardTunnel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Tunnel.StandardTunnel.serializeBinaryToWriter
    );
  }
  f = message.getReverseTunnel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Tunnel.ReverseTunnel.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Tunnel.Type = {
  STANDARD: 0,
  REVERSE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.StandardTunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.StandardTunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel.StandardTunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.StandardTunnel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sshHost: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sshPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sshUser: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serviceHost: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servicePort: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.StandardTunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel.StandardTunnel;
  return proto.Tunnel.StandardTunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel.StandardTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.StandardTunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSshPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceHost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServicePort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.StandardTunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.StandardTunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel.StandardTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.StandardTunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSshHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSshPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSshUser();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServiceHost();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServicePort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string ssh_host = 1;
 * @return {string}
 */
proto.Tunnel.StandardTunnel.prototype.getSshHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setSshHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 ssh_port = 2;
 * @return {number}
 */
proto.Tunnel.StandardTunnel.prototype.getSshPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setSshPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ssh_user = 3;
 * @return {string}
 */
proto.Tunnel.StandardTunnel.prototype.getSshUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setSshUser = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string service_host = 4;
 * @return {string}
 */
proto.Tunnel.StandardTunnel.prototype.getServiceHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setServiceHost = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 service_port = 5;
 * @return {number}
 */
proto.Tunnel.StandardTunnel.prototype.getServicePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setServicePort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.ReverseTunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.ReverseTunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel.ReverseTunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.ReverseTunnel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.ReverseTunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel.ReverseTunnel;
  return proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel.ReverseTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.ReverseTunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.ReverseTunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel.ReverseTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.ReverseTunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Tunnel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.Tunnel.Type}
 */
proto.Tunnel.prototype.getType = function() {
  return /** @type {!proto.Tunnel.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Tunnel.Type} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool enabled = 3;
 * @return {boolean}
 */
proto.Tunnel.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 bind_port = 4;
 * @return {number}
 */
proto.Tunnel.prototype.getBindPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setBindPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional StandardTunnel standard_tunnel = 6;
 * @return {?proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.prototype.getStandardTunnel = function() {
  return /** @type{?proto.Tunnel.StandardTunnel} */ (
    jspb.Message.getWrapperField(this, proto.Tunnel.StandardTunnel, 6));
};


/**
 * @param {?proto.Tunnel.StandardTunnel|undefined} value
 * @return {!proto.Tunnel} returns this
*/
proto.Tunnel.prototype.setStandardTunnel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.Tunnel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.clearStandardTunnel = function() {
  return this.setStandardTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tunnel.prototype.hasStandardTunnel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReverseTunnel reverse_tunnel = 5;
 * @return {?proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.prototype.getReverseTunnel = function() {
  return /** @type{?proto.Tunnel.ReverseTunnel} */ (
    jspb.Message.getWrapperField(this, proto.Tunnel.ReverseTunnel, 5));
};


/**
 * @param {?proto.Tunnel.ReverseTunnel|undefined} value
 * @return {!proto.Tunnel} returns this
*/
proto.Tunnel.prototype.setReverseTunnel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Tunnel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.clearReverseTunnel = function() {
  return this.setReverseTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tunnel.prototype.hasReverseTunnel = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TunnelInstance.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TunnelInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.TunnelInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TunnelInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TunnelInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    healthchecksList: jspb.Message.toObjectList(msg.getHealthchecksList(),
    proto.TunnelHealthcheck.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TunnelInstance}
 */
proto.TunnelInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TunnelInstance;
  return proto.TunnelInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TunnelInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TunnelInstance}
 */
proto.TunnelInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {!proto.TunnelHealthcheck.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.TunnelHealthcheck;
      reader.readMessage(value,proto.TunnelHealthcheck.deserializeBinaryFromReader);
      msg.addHealthchecks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TunnelInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TunnelInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TunnelInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TunnelInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHealthchecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.TunnelHealthcheck.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.TunnelInstance.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TunnelInstance} returns this
 */
proto.TunnelInstance.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.TunnelInstance.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TunnelInstance} returns this
 */
proto.TunnelInstance.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TunnelHealthcheck.Status status = 3;
 * @return {!proto.TunnelHealthcheck.Status}
 */
proto.TunnelInstance.prototype.getStatus = function() {
  return /** @type {!proto.TunnelHealthcheck.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.TunnelHealthcheck.Status} value
 * @return {!proto.TunnelInstance} returns this
 */
proto.TunnelInstance.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated TunnelHealthcheck healthchecks = 4;
 * @return {!Array<!proto.TunnelHealthcheck>}
 */
proto.TunnelInstance.prototype.getHealthchecksList = function() {
  return /** @type{!Array<!proto.TunnelHealthcheck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TunnelHealthcheck, 4));
};


/**
 * @param {!Array<!proto.TunnelHealthcheck>} value
 * @return {!proto.TunnelInstance} returns this
*/
proto.TunnelInstance.prototype.setHealthchecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TunnelHealthcheck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TunnelHealthcheck}
 */
proto.TunnelInstance.prototype.addHealthchecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TunnelHealthcheck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TunnelInstance} returns this
 */
proto.TunnelInstance.prototype.clearHealthchecksList = function() {
  return this.setHealthchecksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TunnelHealthcheck.prototype.toObject = function(opt_includeInstance) {
  return proto.TunnelHealthcheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TunnelHealthcheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TunnelHealthcheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TunnelHealthcheck}
 */
proto.TunnelHealthcheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TunnelHealthcheck;
  return proto.TunnelHealthcheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TunnelHealthcheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TunnelHealthcheck}
 */
proto.TunnelHealthcheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.TunnelHealthcheck.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TunnelHealthcheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TunnelHealthcheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TunnelHealthcheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TunnelHealthcheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.TunnelHealthcheck.Status = {
  WARNING: 0,
  PASSING: 1,
  CRITICAL: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.TunnelHealthcheck.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TunnelHealthcheck} returns this
 */
proto.TunnelHealthcheck.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.TunnelHealthcheck.Status}
 */
proto.TunnelHealthcheck.prototype.getStatus = function() {
  return /** @type {!proto.TunnelHealthcheck.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TunnelHealthcheck.Status} value
 * @return {!proto.TunnelHealthcheck} returns this
 */
proto.TunnelHealthcheck.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.TunnelHealthcheck.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TunnelHealthcheck} returns this
 */
proto.TunnelHealthcheck.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateStandardTunnelRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateStandardTunnelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateStandardTunnelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateStandardTunnelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateStandardTunnelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sshHost: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sshPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sshUser: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serviceHost: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servicePort: jspb.Message.getFieldWithDefault(msg, 5, 0),
    privateKeysList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    createKeyPair: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateStandardTunnelRequest}
 */
proto.CreateStandardTunnelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateStandardTunnelRequest;
  return proto.CreateStandardTunnelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateStandardTunnelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateStandardTunnelRequest}
 */
proto.CreateStandardTunnelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSshPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceHost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServicePort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPrivateKeys(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateKeyPair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateStandardTunnelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateStandardTunnelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateStandardTunnelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateStandardTunnelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSshHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSshPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServiceHost();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServicePort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPrivateKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getCreateKeyPair();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string ssh_host = 1;
 * @return {string}
 */
proto.CreateStandardTunnelRequest.prototype.getSshHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setSshHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 ssh_port = 2;
 * @return {number}
 */
proto.CreateStandardTunnelRequest.prototype.getSshPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setSshPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ssh_user = 3;
 * @return {string}
 */
proto.CreateStandardTunnelRequest.prototype.getSshUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setSshUser = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.clearSshUser = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CreateStandardTunnelRequest.prototype.hasSshUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string service_host = 4;
 * @return {string}
 */
proto.CreateStandardTunnelRequest.prototype.getServiceHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setServiceHost = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 service_port = 5;
 * @return {number}
 */
proto.CreateStandardTunnelRequest.prototype.getServicePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setServicePort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string private_keys = 6;
 * @return {!Array<string>}
 */
proto.CreateStandardTunnelRequest.prototype.getPrivateKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setPrivateKeysList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.addPrivateKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.clearPrivateKeysList = function() {
  return this.setPrivateKeysList([]);
};


/**
 * optional bool create_key_pair = 7;
 * @return {boolean}
 */
proto.CreateStandardTunnelRequest.prototype.getCreateKeyPair = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CreateStandardTunnelRequest} returns this
 */
proto.CreateStandardTunnelRequest.prototype.setCreateKeyPair = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateReverseTunnelRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateReverseTunnelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateReverseTunnelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateReverseTunnelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateReverseTunnelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    createKeyPair: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateReverseTunnelRequest}
 */
proto.CreateReverseTunnelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateReverseTunnelRequest;
  return proto.CreateReverseTunnelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateReverseTunnelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateReverseTunnelRequest}
 */
proto.CreateReverseTunnelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPublicKeys(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateKeyPair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateReverseTunnelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateReverseTunnelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateReverseTunnelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateReverseTunnelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCreateKeyPair();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string public_keys = 1;
 * @return {!Array<string>}
 */
proto.CreateReverseTunnelRequest.prototype.getPublicKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CreateReverseTunnelRequest} returns this
 */
proto.CreateReverseTunnelRequest.prototype.setPublicKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CreateReverseTunnelRequest} returns this
 */
proto.CreateReverseTunnelRequest.prototype.addPublicKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CreateReverseTunnelRequest} returns this
 */
proto.CreateReverseTunnelRequest.prototype.clearPublicKeysList = function() {
  return this.setPublicKeysList([]);
};


/**
 * optional bool create_key_pair = 2;
 * @return {boolean}
 */
proto.CreateReverseTunnelRequest.prototype.getCreateKeyPair = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CreateReverseTunnelRequest} returns this
 */
proto.CreateReverseTunnelRequest.prototype.setCreateKeyPair = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTunnelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTunnelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTunnelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTunnelRequest}
 */
proto.GetTunnelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTunnelRequest;
  return proto.GetTunnelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTunnelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTunnelRequest}
 */
proto.GetTunnelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTunnelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTunnelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTunnelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.GetTunnelRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetTunnelRequest} returns this
 */
proto.GetTunnelRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetTunnelResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTunnelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTunnelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTunnelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tunnel: (f = msg.getTunnel()) && proto.Tunnel.toObject(includeInstance, f),
    instancesList: jspb.Message.toObjectList(msg.getInstancesList(),
    proto.TunnelInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTunnelResponse}
 */
proto.GetTunnelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTunnelResponse;
  return proto.GetTunnelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTunnelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTunnelResponse}
 */
proto.GetTunnelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Tunnel;
      reader.readMessage(value,proto.Tunnel.deserializeBinaryFromReader);
      msg.setTunnel(value);
      break;
    case 2:
      var value = new proto.TunnelInstance;
      reader.readMessage(value,proto.TunnelInstance.deserializeBinaryFromReader);
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTunnelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTunnelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTunnelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTunnel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Tunnel.serializeBinaryToWriter
    );
  }
  f = message.getInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TunnelInstance.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tunnel tunnel = 1;
 * @return {?proto.Tunnel}
 */
proto.GetTunnelResponse.prototype.getTunnel = function() {
  return /** @type{?proto.Tunnel} */ (
    jspb.Message.getWrapperField(this, proto.Tunnel, 1));
};


/**
 * @param {?proto.Tunnel|undefined} value
 * @return {!proto.GetTunnelResponse} returns this
*/
proto.GetTunnelResponse.prototype.setTunnel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetTunnelResponse} returns this
 */
proto.GetTunnelResponse.prototype.clearTunnel = function() {
  return this.setTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetTunnelResponse.prototype.hasTunnel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TunnelInstance instances = 2;
 * @return {!Array<!proto.TunnelInstance>}
 */
proto.GetTunnelResponse.prototype.getInstancesList = function() {
  return /** @type{!Array<!proto.TunnelInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TunnelInstance, 2));
};


/**
 * @param {!Array<!proto.TunnelInstance>} value
 * @return {!proto.GetTunnelResponse} returns this
*/
proto.GetTunnelResponse.prototype.setInstancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TunnelInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TunnelInstance}
 */
proto.GetTunnelResponse.prototype.addInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TunnelInstance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetTunnelResponse} returns this
 */
proto.GetTunnelResponse.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteTunnelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteTunnelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteTunnelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteTunnelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteTunnelRequest}
 */
proto.DeleteTunnelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteTunnelRequest;
  return proto.DeleteTunnelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteTunnelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteTunnelRequest}
 */
proto.DeleteTunnelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteTunnelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteTunnelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteTunnelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteTunnelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.DeleteTunnelRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeleteTunnelRequest} returns this
 */
proto.DeleteTunnelRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
