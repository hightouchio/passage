// source: tunnel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.GetTunnelRequest', null, global);
goog.exportSymbol('proto.Tunnel', null, global);
goog.exportSymbol('proto.Tunnel.ReverseTunnel', null, global);
goog.exportSymbol('proto.Tunnel.StandardTunnel', null, global);
goog.exportSymbol('proto.Tunnel.TunnelCase', null, global);
goog.exportSymbol('proto.Tunnel.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Tunnel.oneofGroups_);
};
goog.inherits(proto.Tunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.displayName = 'proto.Tunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel.StandardTunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tunnel.StandardTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.StandardTunnel.displayName = 'proto.Tunnel.StandardTunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tunnel.ReverseTunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tunnel.ReverseTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tunnel.ReverseTunnel.displayName = 'proto.Tunnel.ReverseTunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTunnelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTunnelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetTunnelRequest.displayName = 'proto.GetTunnelRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Tunnel.oneofGroups_ = [[6,5]];

/**
 * @enum {number}
 */
proto.Tunnel.TunnelCase = {
  TUNNEL_NOT_SET: 0,
  STANDARD_TUNNEL: 6,
  REVERSE_TUNNEL: 5
};

/**
 * @return {proto.Tunnel.TunnelCase}
 */
proto.Tunnel.prototype.getTunnelCase = function() {
  return /** @type {proto.Tunnel.TunnelCase} */(jspb.Message.computeOneofCase(this, proto.Tunnel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    bindport: jspb.Message.getFieldWithDefault(msg, 4, 0),
    standardTunnel: (f = msg.getStandardTunnel()) && proto.Tunnel.StandardTunnel.toObject(includeInstance, f),
    reverseTunnel: (f = msg.getReverseTunnel()) && proto.Tunnel.ReverseTunnel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel}
 */
proto.Tunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel;
  return proto.Tunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel}
 */
proto.Tunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.Tunnel.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBindport(value);
      break;
    case 6:
      var value = new proto.Tunnel.StandardTunnel;
      reader.readMessage(value,proto.Tunnel.StandardTunnel.deserializeBinaryFromReader);
      msg.setStandardTunnel(value);
      break;
    case 5:
      var value = new proto.Tunnel.ReverseTunnel;
      reader.readMessage(value,proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader);
      msg.setReverseTunnel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBindport();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStandardTunnel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Tunnel.StandardTunnel.serializeBinaryToWriter
    );
  }
  f = message.getReverseTunnel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Tunnel.ReverseTunnel.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Tunnel.Type = {
  STANDARD: 0,
  REVERSE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.StandardTunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.StandardTunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel.StandardTunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.StandardTunnel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sshhost: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sshport: jspb.Message.getFieldWithDefault(msg, 2, 0),
    servicehost: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serviceport: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.StandardTunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel.StandardTunnel;
  return proto.Tunnel.StandardTunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel.StandardTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.StandardTunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSshhost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSshport(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicehost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.StandardTunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.StandardTunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel.StandardTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.StandardTunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSshhost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSshport();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getServicehost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServiceport();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string SshHost = 1;
 * @return {string}
 */
proto.Tunnel.StandardTunnel.prototype.getSshhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setSshhost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 SshPort = 2;
 * @return {number}
 */
proto.Tunnel.StandardTunnel.prototype.getSshport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setSshport = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ServiceHost = 3;
 * @return {string}
 */
proto.Tunnel.StandardTunnel.prototype.getServicehost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setServicehost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 ServicePort = 4;
 * @return {number}
 */
proto.Tunnel.StandardTunnel.prototype.getServiceport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel.StandardTunnel} returns this
 */
proto.Tunnel.StandardTunnel.prototype.setServiceport = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tunnel.ReverseTunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.Tunnel.ReverseTunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tunnel.ReverseTunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.ReverseTunnel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.ReverseTunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tunnel.ReverseTunnel;
  return proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tunnel.ReverseTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.ReverseTunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tunnel.ReverseTunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tunnel.ReverseTunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tunnel.ReverseTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tunnel.ReverseTunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Tunnel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.Tunnel.Type}
 */
proto.Tunnel.prototype.getType = function() {
  return /** @type {!proto.Tunnel.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Tunnel.Type} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool enabled = 3;
 * @return {boolean}
 */
proto.Tunnel.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 BindPort = 4;
 * @return {number}
 */
proto.Tunnel.prototype.getBindport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.setBindport = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional StandardTunnel standard_tunnel = 6;
 * @return {?proto.Tunnel.StandardTunnel}
 */
proto.Tunnel.prototype.getStandardTunnel = function() {
  return /** @type{?proto.Tunnel.StandardTunnel} */ (
    jspb.Message.getWrapperField(this, proto.Tunnel.StandardTunnel, 6));
};


/**
 * @param {?proto.Tunnel.StandardTunnel|undefined} value
 * @return {!proto.Tunnel} returns this
*/
proto.Tunnel.prototype.setStandardTunnel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.Tunnel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.clearStandardTunnel = function() {
  return this.setStandardTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tunnel.prototype.hasStandardTunnel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReverseTunnel reverse_tunnel = 5;
 * @return {?proto.Tunnel.ReverseTunnel}
 */
proto.Tunnel.prototype.getReverseTunnel = function() {
  return /** @type{?proto.Tunnel.ReverseTunnel} */ (
    jspb.Message.getWrapperField(this, proto.Tunnel.ReverseTunnel, 5));
};


/**
 * @param {?proto.Tunnel.ReverseTunnel|undefined} value
 * @return {!proto.Tunnel} returns this
*/
proto.Tunnel.prototype.setReverseTunnel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Tunnel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tunnel} returns this
 */
proto.Tunnel.prototype.clearReverseTunnel = function() {
  return this.setReverseTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tunnel.prototype.hasReverseTunnel = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTunnelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTunnelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTunnelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTunnelRequest}
 */
proto.GetTunnelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTunnelRequest;
  return proto.GetTunnelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTunnelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTunnelRequest}
 */
proto.GetTunnelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTunnelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTunnelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTunnelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTunnelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.GetTunnelRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetTunnelRequest} returns this
 */
proto.GetTunnelRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
